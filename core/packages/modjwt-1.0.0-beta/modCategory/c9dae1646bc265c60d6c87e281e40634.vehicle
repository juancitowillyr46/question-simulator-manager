<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Chunks' => 
    array (
      'c34a8209b886cb5c90cfda9ff6e300e9' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"modjwtCssSample","description":"Sample CSS for modJWT","editor_type":0,"category":0,"cache_type":0,"snippet":"<style>\\npre {color:#777777;}\\n<\\/style>","locked":0,"properties":"a:0:{}","static":0,"static_file":"","content":"<style>\\npre {color:#777777;}\\n<\\/style>"}',
        'guid' => '6bea595b6eae94de823a275abb4a8c64',
        'native_key' => 1,
        'signature' => 'b29d91e031aac08432b87cf351eca9e2',
      ),
      '5f6e2709238f068cd8634b4ce043a6b8' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"name":"modjwtScriptSample","description":"Sample script for modJWT","editor_type":0,"category":0,"cache_type":0,"snippet":"<script>\\nvar _countClick = 0;\\nvar _actionVal = \'\';\\nvar L = window.location.href.split(\'#\')[0]; \\n\\n$(document).ready(function() {\\n    if (!window.localStorage) {\\n         _loggerJWT(\\"Sorry, \'window.localStorage\' not supported on your browser.\\");\\n        _disableForm(\'modJWTForm\', true);\\n        return;\\n    }\\n\\n    $(function () {\\n        var msgs = \'\', data = \'\'; \\n        \\n        $(\'#getToken\').on(\'click\', function(e){\\n            if (localStorage.getItem(\\"token\\")) {\\n                alert(\\"You already have Token on your localStorage.\\\\nRemove it before creating a new one.\\");\\n                return false;\\n            } else {\\n                var _token = null; msgs=\'\'; data = {};\\n\\n                _countClick++;\\n                _actionVal = this.formAction;\\n                window.location.assign(L + \\"#\\" + _countClick + \\"~create\\");               \\n                \\n                $(\'#loggerData\').text(\\"\\");\\n                $.ajax({\\n                    url: _actionVal,\\n                    crossDomain: false,  \\/\\/remove this line if not needed or set to false\\n                    type: \'GET\',         \\/\\/GET or POST get same result\\n                    success: function (data) {\\n                        msgs = JSON.stringify(data);\\n                        if (data && typeof data._valid !== \'undefined\') {\\n                            if (data._valid === 1 && data.token !== null) { \\/\\/here we check the Token\\n                                _token = data.token;\\n                                localStorage.setItem(\\"token\\", _token);\\n                                $(\'#loggerData\').text(\\"Token:\\\\n\\" + _token);\\n                            } else {\\n                                msgs +=  \\" \\\\n - Verify URL: \\" + _actionVal;\\n                                msgs +=  \\" \\\\n - Go to manager: edit the \'formaction\' of blue link above!\\";\\n                            }\\n                        } else {\\n                            msgs +=  \\" \\\\n - unknown error\\";\\n                        }\\n                        _loggerJWT(msgs);\\n                    },\\n                    error: function (_request, _error, _text) {\\n                        \\/\\/console.log(arguments);\\n                        $(\'#loggerData\').text(_request.status + \\" \\" + _text);\\n                        _loggerJWT(_request.status + \\" \\" + _text + \\"\\\\nRequest: - \\" + _actionVal);\\n                    }\\n                });\\n            }\\n            event.preventDefault();\\n        });    \\n            \\n        $(\'#valToken\').on(\'click\', function(e){\\n            if (_token = localStorage.getItem(\\"token\\")) {\\n                _countClick++; _actionVal = this.formAction; msgs=\'\'; data = \'\'; \\n                window.location.assign(L + \\"#\\" + _countClick + \\"~validate\\");\\n                \\n                $(\'#loggerData\').text(\\"\\");\\n                \\n                $.ajax({\\n                    url: _actionVal,\\n                    headers: {\\n                        \'Authorization\': \\"Bearer \\" + _token        \\/\\/important! pass token here\\n                    },\\n                    crossDomain: true,                             \\/\\/remove this line if not needed or set to false\\n                    type: \'GET\',                                   \\/\\/we dont need to post data, set Token in the header\\n                    success: function (data) {\\n                        msgs = JSON.stringify(data);\\n                        if (data && typeof data._valid !== \'undefined\') {\\n                            if (data._valid === 1 && data.payload !== null) { \\/\\/here we check the Payload\\n                                $(\'#loggerData\').text(\\"Payload:\\\\n\\" + JSON.stringify(data.payload));\\n                            } else {\\n                                msgs +=  \\" \\\\n - seems you went to the wrong page\\";\\n                            }\\n                        } else {\\n                            msgs +=  \\" \\\\n - unknown error\\";\\n                        }\\n                        _loggerJWT(msgs);\\n                    },\\n                    error: function (_request, _error, _text) {\\n                        \\/\\/console.log(arguments);\\n                        $(\'#loggerData\').text(_request.status + \\" \\" + _text);\\n                        _loggerJWT(_request.status + \\" \\" + _text + \\"\\\\nRequest: - \\" + _actionVal);\\n                    }\\n                });\\n            } else {\\n                alert(\\"There is no Token in your localStorage\\");\\n                return false;\\n            }\\n            \\n            $(\'#loggerData\').text(\'\');\\n            _loggerJWT(msgs);\\n            \\n            event.preventDefault();\\n        });    \\n        \\n        $(\'#cusToken\').on(\'click\', function(e){\\n            if (_token = localStorage.getItem(\\"token\\")) {\\n                _countClick++; _actionVal = this.formAction; msgs=\'\'; data = \'\'; \\n                window.location.assign(L + \\"#\\" + _countClick + \\"~custom\\");\\n                \\n                $(\'#loggerData\').text(\\"\\");\\n                \\n                $.ajax({\\n                    url: _actionVal,\\n                    headers: {\\n                        \'Authorization\': \\"Bearer \\" + _token        \\/\\/pass token here\\n                    },\\n                    crossDomain: true,                             \\/\\/remove this line if not needed or set to false\\n                    type: \'GET\',                                   \\/\\/we dont need to post data, set Token in the header\\n                    success: function (data) {\\n                        msgs = JSON.stringify(data);\\n                        if (data && typeof data._valid !== \'undefined\') {\\n                            if (data._valid === 1 && data.retval !== null) { \\/\\/here we check the retval\\n                                $(\'#loggerData\').text(\\"Custom output (see jwtDecodeRunSnippet):\\\\n\\" + JSON.stringify(data.retval));\\n                            } else {\\n                                msgs +=  \\" \\\\n - seems you went to the wrong page\\";\\n                            }\\n                        } else {\\n                            msgs +=  \\" \\\\n - unknown error\\";\\n                        }\\n                        _loggerJWT(msgs);\\n                    },\\n                    error: function (_request, _error, _text) {\\n                        \\/\\/console.log(arguments);\\n                        $(\'#loggerData\').text(_request.status + \\" \\" + _text);\\n                        _loggerJWT(_request.status + \\" \\" + _text + \\"\\\\nRequest: - \\" + _actionVal);\\n                    }\\n                });\\n            } else {\\n                alert(\\"Custom? Have you create the Token?\\");\\n                return false;\\n            }\\n            \\n            $(\'#loggerData\').text(\'\');\\n            _loggerJWT(msgs);\\n            \\n            event.preventDefault();\\n        });  \\n        \\n        $(\'#remToken\').on(\'click\', function(e){\\n            if (_token = localStorage.getItem(\\"token\\")) {\\n                _countClick++;_actionVal = this.formAction; msgs=\'\'; data = \'\'; \\n                window.location.assign(L + \\"#\\" + _countClick + \\"~remove\\");\\n                \\n                localStorage.removeItem(\\"token\\");\\n                msgs=\\"Token removed from your localStorage\\";\\n            } else {\\n                alert(\\"No Token. No, no...\\");\\n                return false;\\n            }\\n            \\n            $(\'#loggerData\').text(\'\');\\n            _loggerJWT(msgs);\\n            \\n            event.preventDefault();\\n        });\\n        \\n        $(\'#resetForm\').on(\'click\', function(e){\\n            _countClick=0;_actionVal = \'reset\'; msgs=\'\'; data = \'\'; \\n            $(\'#logger\').text(\'\');\\n            localStorage.removeItem(\\"token\\");\\n            window.location.assign(L+\'#Logger\');\\n            \\n            $(\'#loggerData\').text(\'\');\\n            $(\'#logger\').text(\'#Logger\');\\n        });\\n    });\\n});\\n\\n$(window).bind(\'beforeunload\', function (event) { \\/\\/detect hash change\\n    localStorage.removeItem(\\"token\\");\\n});\\n\\nfunction _loggerJWT(val) {\\n    var hash = window.location.hash.slice(1);\\n    var Logs = \\"#\\" + hash;\\n    if ((val).length>0) Logs += \\"\\\\n\\" + val;\\n    Logs += \\"\\\\n\\\\n\\" + $(\'#logger\').val();\\n    $(\'#logger\').text(Logs);\\n}\\n\\nfunction _disableForm(formId, yesNo) {\\n   var f = document.getElementById(formId), s, opacity;\\n   s = f.style; opacity = yesNo? \'65\' : \'100\'; \\n   s.opacity = s.MozOpacity = s.KhtmlOpacity = opacity\\/100; s.filter = \'alpha(opacity=\'+opacity+\')\';\\n   for(var i=0; i<f.length; i++) f[i].disabled = yesNo;\\n}\\n<\\/script>","locked":0,"properties":"a:0:{}","static":0,"static_file":"","content":"<script>\\nvar _countClick = 0;\\nvar _actionVal = \'\';\\nvar L = window.location.href.split(\'#\')[0]; \\n\\n$(document).ready(function() {\\n    if (!window.localStorage) {\\n         _loggerJWT(\\"Sorry, \'window.localStorage\' not supported on your browser.\\");\\n        _disableForm(\'modJWTForm\', true);\\n        return;\\n    }\\n\\n    $(function () {\\n        var msgs = \'\', data = \'\'; \\n        \\n        $(\'#getToken\').on(\'click\', function(e){\\n            if (localStorage.getItem(\\"token\\")) {\\n                alert(\\"You already have Token on your localStorage.\\\\nRemove it before creating a new one.\\");\\n                return false;\\n            } else {\\n                var _token = null; msgs=\'\'; data = {};\\n\\n                _countClick++;\\n                _actionVal = this.formAction;\\n                window.location.assign(L + \\"#\\" + _countClick + \\"~create\\");               \\n                \\n                $(\'#loggerData\').text(\\"\\");\\n                $.ajax({\\n                    url: _actionVal,\\n                    crossDomain: false,  \\/\\/remove this line if not needed or set to false\\n                    type: \'GET\',         \\/\\/GET or POST get same result\\n                    success: function (data) {\\n                        msgs = JSON.stringify(data);\\n                        if (data && typeof data._valid !== \'undefined\') {\\n                            if (data._valid === 1 && data.token !== null) { \\/\\/here we check the Token\\n                                _token = data.token;\\n                                localStorage.setItem(\\"token\\", _token);\\n                                $(\'#loggerData\').text(\\"Token:\\\\n\\" + _token);\\n                            } else {\\n                                msgs +=  \\" \\\\n - Verify URL: \\" + _actionVal;\\n                                msgs +=  \\" \\\\n - Go to manager: edit the \'formaction\' of blue link above!\\";\\n                            }\\n                        } else {\\n                            msgs +=  \\" \\\\n - unknown error\\";\\n                        }\\n                        _loggerJWT(msgs);\\n                    },\\n                    error: function (_request, _error, _text) {\\n                        \\/\\/console.log(arguments);\\n                        $(\'#loggerData\').text(_request.status + \\" \\" + _text);\\n                        _loggerJWT(_request.status + \\" \\" + _text + \\"\\\\nRequest: - \\" + _actionVal);\\n                    }\\n                });\\n            }\\n            event.preventDefault();\\n        });    \\n            \\n        $(\'#valToken\').on(\'click\', function(e){\\n            if (_token = localStorage.getItem(\\"token\\")) {\\n                _countClick++; _actionVal = this.formAction; msgs=\'\'; data = \'\'; \\n                window.location.assign(L + \\"#\\" + _countClick + \\"~validate\\");\\n                \\n                $(\'#loggerData\').text(\\"\\");\\n                \\n                $.ajax({\\n                    url: _actionVal,\\n                    headers: {\\n                        \'Authorization\': \\"Bearer \\" + _token        \\/\\/important! pass token here\\n                    },\\n                    crossDomain: true,                             \\/\\/remove this line if not needed or set to false\\n                    type: \'GET\',                                   \\/\\/we dont need to post data, set Token in the header\\n                    success: function (data) {\\n                        msgs = JSON.stringify(data);\\n                        if (data && typeof data._valid !== \'undefined\') {\\n                            if (data._valid === 1 && data.payload !== null) { \\/\\/here we check the Payload\\n                                $(\'#loggerData\').text(\\"Payload:\\\\n\\" + JSON.stringify(data.payload));\\n                            } else {\\n                                msgs +=  \\" \\\\n - seems you went to the wrong page\\";\\n                            }\\n                        } else {\\n                            msgs +=  \\" \\\\n - unknown error\\";\\n                        }\\n                        _loggerJWT(msgs);\\n                    },\\n                    error: function (_request, _error, _text) {\\n                        \\/\\/console.log(arguments);\\n                        $(\'#loggerData\').text(_request.status + \\" \\" + _text);\\n                        _loggerJWT(_request.status + \\" \\" + _text + \\"\\\\nRequest: - \\" + _actionVal);\\n                    }\\n                });\\n            } else {\\n                alert(\\"There is no Token in your localStorage\\");\\n                return false;\\n            }\\n            \\n            $(\'#loggerData\').text(\'\');\\n            _loggerJWT(msgs);\\n            \\n            event.preventDefault();\\n        });    \\n        \\n        $(\'#cusToken\').on(\'click\', function(e){\\n            if (_token = localStorage.getItem(\\"token\\")) {\\n                _countClick++; _actionVal = this.formAction; msgs=\'\'; data = \'\'; \\n                window.location.assign(L + \\"#\\" + _countClick + \\"~custom\\");\\n                \\n                $(\'#loggerData\').text(\\"\\");\\n                \\n                $.ajax({\\n                    url: _actionVal,\\n                    headers: {\\n                        \'Authorization\': \\"Bearer \\" + _token        \\/\\/pass token here\\n                    },\\n                    crossDomain: true,                             \\/\\/remove this line if not needed or set to false\\n                    type: \'GET\',                                   \\/\\/we dont need to post data, set Token in the header\\n                    success: function (data) {\\n                        msgs = JSON.stringify(data);\\n                        if (data && typeof data._valid !== \'undefined\') {\\n                            if (data._valid === 1 && data.retval !== null) { \\/\\/here we check the retval\\n                                $(\'#loggerData\').text(\\"Custom output (see jwtDecodeRunSnippet):\\\\n\\" + JSON.stringify(data.retval));\\n                            } else {\\n                                msgs +=  \\" \\\\n - seems you went to the wrong page\\";\\n                            }\\n                        } else {\\n                            msgs +=  \\" \\\\n - unknown error\\";\\n                        }\\n                        _loggerJWT(msgs);\\n                    },\\n                    error: function (_request, _error, _text) {\\n                        \\/\\/console.log(arguments);\\n                        $(\'#loggerData\').text(_request.status + \\" \\" + _text);\\n                        _loggerJWT(_request.status + \\" \\" + _text + \\"\\\\nRequest: - \\" + _actionVal);\\n                    }\\n                });\\n            } else {\\n                alert(\\"Custom? Have you create the Token?\\");\\n                return false;\\n            }\\n            \\n            $(\'#loggerData\').text(\'\');\\n            _loggerJWT(msgs);\\n            \\n            event.preventDefault();\\n        });  \\n        \\n        $(\'#remToken\').on(\'click\', function(e){\\n            if (_token = localStorage.getItem(\\"token\\")) {\\n                _countClick++;_actionVal = this.formAction; msgs=\'\'; data = \'\'; \\n                window.location.assign(L + \\"#\\" + _countClick + \\"~remove\\");\\n                \\n                localStorage.removeItem(\\"token\\");\\n                msgs=\\"Token removed from your localStorage\\";\\n            } else {\\n                alert(\\"No Token. No, no...\\");\\n                return false;\\n            }\\n            \\n            $(\'#loggerData\').text(\'\');\\n            _loggerJWT(msgs);\\n            \\n            event.preventDefault();\\n        });\\n        \\n        $(\'#resetForm\').on(\'click\', function(e){\\n            _countClick=0;_actionVal = \'reset\'; msgs=\'\'; data = \'\'; \\n            $(\'#logger\').text(\'\');\\n            localStorage.removeItem(\\"token\\");\\n            window.location.assign(L+\'#Logger\');\\n            \\n            $(\'#loggerData\').text(\'\');\\n            $(\'#logger\').text(\'#Logger\');\\n        });\\n    });\\n});\\n\\n$(window).bind(\'beforeunload\', function (event) { \\/\\/detect hash change\\n    localStorage.removeItem(\\"token\\");\\n});\\n\\nfunction _loggerJWT(val) {\\n    var hash = window.location.hash.slice(1);\\n    var Logs = \\"#\\" + hash;\\n    if ((val).length>0) Logs += \\"\\\\n\\" + val;\\n    Logs += \\"\\\\n\\\\n\\" + $(\'#logger\').val();\\n    $(\'#logger\').text(Logs);\\n}\\n\\nfunction _disableForm(formId, yesNo) {\\n   var f = document.getElementById(formId), s, opacity;\\n   s = f.style; opacity = yesNo? \'65\' : \'100\'; \\n   s.opacity = s.MozOpacity = s.KhtmlOpacity = opacity\\/100; s.filter = \'alpha(opacity=\'+opacity+\')\';\\n   for(var i=0; i<f.length; i++) f[i].disabled = yesNo;\\n}\\n<\\/script>"}',
        'guid' => 'c4a7a3d0e093850b278bcefb66366a85',
        'native_key' => 2,
        'signature' => '0beb9e0f9d937478300c313e87a5f9a2',
      ),
    ),
    'Snippets' => 
    array (
      '9fdb70329afa10606331cb95e434dc33' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"jwtDecode","description":"Validating or encoding JWT Token, return Payload Data","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * jwtDecode snippet for modJWT extra\\n *\\n * Copyright (C) 2019 by Zaenal <zaenal(#)lokamaya.com>\\n * Created on 03-26-2019\\n * \\n * modJWT is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * modJWT is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * modJWT; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package modjwt\\n *\\/\\n\\n\\/**\\n * jwtDecode\\n *\\n * DESCRIPTION\\n *\\n * Validating or encoding JWT Token, return Payload Data\\n * You can output directly or to placeholder\\n *\\n *\\n * PROPERTIES:\\n * &method                  string     required    Default: `HEADER` (options: HEADER, JSON, POST, GET)\\n * &httpQuery               string     required    required if using method JSON, POST, or GET. Default: token.\\n * &redirectTo              mixed      optional    Default: null; otherwise will be redirected to given uri\\n * &redirectScheme          string     optional    Default: `full` (modx->makeURL parameter)\\n * -------\\n * &typ                     string     optional    Default: `JWT` (options: JWT, JWS)\\n * &alg                     string     required    Default: `HS256,HS384,HS512`; list of allowed alghoritms\\n * &validAlg                string     optional    Alternate to &alg\\n * -------\\n * secretKey                string     required    Required for symetric algorithm, like HS256, HS384 or HS512.  \\n *                                                 - using default modx setting: `[[++modjwt.secretkey]]`\\n *                                                 - using custom secret key: `mysecretkey1234`\\n * secretFile               string     required    Absolute path to file PUBLIC-KEY. Required for asymetric algorithm, like RS256.\\n *                                                 - using default modx setting: `[[++modjwt.publickey]]`\\n *                                                 - using custom file: `\\/var\\/www\\/modx\\/protectedfolder\\/mypublic.key`\\n * -------\\n * &mimeType                string     optional    Default: `JSON` (options: json, html)\\n * &toPlaceholder           mixed      optional    Default: null (direct output), otherwise will be set to the &toPlaceholder\'s value.\\n * &debugPlaceholder        string     optional    Default: `jwtDebug`\\n * -------\\n * &iss                     string     optional    URI of JWT issuer (default: your MODx URL) \\n * &sub                     string     optional    If empty, auto-populated by subField value below\\n * &subField                string     optional    Default: email of visitor\\/user (options: username, email, userid, sessionid)\\n * &aud                     string     optional    URI of the audience\\/server \\n * &jti                     bool       optional    Default: false (if true, auto-populated by sessionid)\\n * &leeway                  integer    optional    Default: 0, the amount of seconds to move or act that is available; no need in same server\\n *\\n *\\n * USAGE:\\n *\\n * [[jwtDecode]]\\n * [[jwtDecode? &redirectTo=`50`]]                         \\/\\/on success will be redirected to resourceid=10\\n * [[jwtDecode? &redirectTo=`http:\\/\\/mydomain.com\\/video\\/`]] \\/\\/on success will be redirected to this url\\n * [[jwtDecode? &validAlg=`HS256,HS384`]]                  \\/\\/only this algorithm allowed\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n * @var modJWT $modJWT\\n**\\/\\n\\n$output = \'\';\\n\\n\\/**\\n * You can edit scriptProperties configurations below\\n**\\/\\n\\n\\/\\/ Core path\\n$corePath  = $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/modjwt\\/\';\\n$scriptProperties[\'corePath\'] = $corePath;\\n$scriptProperties[\'requestType\'] = \'decode\';\\n\\n\\/** @var modJWT $modJWT *\\/\\n$modJWT = $modx->getService(\\n    \'modjwt\', \\n    \'modFirebaseJWT\', \\n    $corePath . \'model\\/modjwt\\/\',\\n    $scriptProperties\\n);\\n\\nif (!$modJWT) {\\n    $log = \'Could not load modJWT class!\';\\n    \\n    $modx->setPlaceholder($debugPlaceholder, $log);\\n    $modx->log(modX::LOG_LEVEL_ERROR, $log);\\n    \\n    return json_encode(array(\\n        \'_valid\'     => 0,\\n        \'status\'     => 503,\\n        \'statusText\' => \'Service Unavailable\',\\n        \'errorLog\'   => $log\\n    ));\\n}\\n\\n$output = \'\';\\nif ($payload = $modJWT->decodeJWT()) {  \\/\\/success\\n  $output = $modJWT->jsonData;\\n} else {                                \\/\\/error\\n  $output = $modJWT->errorData;\\n}\\n\\nreturn $output;","locked":0,"properties":"a:18:{s:3:\\"aud\\";a:7:{s:4:\\"name\\";s:3:\\"aud\\";s:4:\\"desc\\";s:50:\\"URI of the audience\\/server (default: your domain) \\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"iss\\";a:7:{s:4:\\"name\\";s:3:\\"iss\\";s:4:\\"desc\\";s:41:\\"URI of JWT issuer (default: your domain) \\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"jti\\";a:7:{s:4:\\"name\\";s:3:\\"jti\\";s:4:\\"desc\\";s:53:\\"Default: false (if true, auto-populated by sessionid)\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"sub\\";a:7:{s:4:\\"name\\";s:3:\\"sub\\";s:4:\\"desc\\";s:79:\\"Subject or user that use the Token. If empty, auto-populated by subField value.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:8:\\"validAlg\\";a:7:{s:4:\\"name\\";s:8:\\"validAlg\\";s:4:\\"desc\\";s:17:\\"Alternate to &alg\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:6:\\"leeway\\";a:7:{s:4:\\"name\\";s:6:\\"leeway\\";s:4:\\"desc\\";s:48:\\"Timestamp leeway synchronization between servers\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:6:\\"expAge\\";a:7:{s:4:\\"name\\";s:6:\\"expAge\\";s:4:\\"desc\\";s:33:\\"Expire age. Default: 3600 seconds\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:4:\\"3600\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"alg\\";a:7:{s:4:\\"name\\";s:3:\\"alg\\";s:4:\\"desc\\";s:71:\\"JWT algorithm. Default `HS256` (options: HS256, HS384, HS512 and RS256)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:5:\\"HS256\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"typ\\";a:7:{s:4:\\"name\\";s:3:\\"typ\\";s:4:\\"desc\\";s:45:\\"JSON Type. Default: `JWT` (options: JWT, JWS)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:3:\\"JWT\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:8:\\"subField\\";a:7:{s:4:\\"name\\";s:8:\\"subField\\";s:4:\\"desc\\";s:103:\\"User variable to use for \\"sub\\" as subject. Default: email (options: username, email, userid, sessionid)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:5:\\"email\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:10:\\"publicFile\\";a:7:{s:4:\\"name\\";s:10:\\"publicFile\\";s:4:\\"desc\\";s:133:\\"Absolute path to file PUBLIC KEY. Required for asymetric algorithm, like RS256. Default: `[[++modjwt.publickey]]` from configuration.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:4:\\"keys\\";}s:9:\\"secretKey\\";a:7:{s:4:\\"name\\";s:9:\\"secretKey\\";s:4:\\"desc\\";s:116:\\"Secret key for symetric algorithm, like HS256, HS384 or HS512. Default: `[[++modjwt.secretkey]]` from configuration.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:4:\\"keys\\";}s:13:\\"toPlaceholder\\";a:7:{s:4:\\"name\\";s:13:\\"toPlaceholder\\";s:4:\\"desc\\";s:42:\\"Default: null (if null mean direct output)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}s:10:\\"redirectTo\\";a:7:{s:4:\\"name\\";s:10:\\"redirectTo\\";s:4:\\"desc\\";s:54:\\"Default: 0; otherwise will be redirected to given uri.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}s:6:\\"method\\";a:7:{s:4:\\"name\\";s:6:\\"method\\";s:4:\\"desc\\";s:78:\\"How to get the Token? Default: `HEADER,GET` (options: HEADER, JSON, POST, GET)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:10:\\"HEADER,GET\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}s:8:\\"mimeType\\";a:7:{s:4:\\"name\\";s:8:\\"mimeType\\";s:4:\\"desc\\";s:61:\\"Output as json or text. Default: `json` (options: json, text)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:4:\\"json\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}s:16:\\"debugPlaceholder\\";a:7:{s:4:\\"name\\";s:16:\\"debugPlaceholder\\";s:4:\\"desc\\";s:49:\\"Placeholder for debuging JWT. Default: `jwtDebug`\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:8:\\"jwtDebug\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}s:9:\\"httpQuery\\";a:7:{s:4:\\"name\\";s:9:\\"httpQuery\\";s:4:\\"desc\\";s:55:\\"Required if using method POST or GET. Default: `token`.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:5:\\"token\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * jwtDecode snippet for modJWT extra\\n *\\n * Copyright (C) 2019 by Zaenal <zaenal(#)lokamaya.com>\\n * Created on 03-26-2019\\n * \\n * modJWT is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * modJWT is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * modJWT; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package modjwt\\n *\\/\\n\\n\\/**\\n * jwtDecode\\n *\\n * DESCRIPTION\\n *\\n * Validating or encoding JWT Token, return Payload Data\\n * You can output directly or to placeholder\\n *\\n *\\n * PROPERTIES:\\n * &method                  string     required    Default: `HEADER` (options: HEADER, JSON, POST, GET)\\n * &httpQuery               string     required    required if using method JSON, POST, or GET. Default: token.\\n * &redirectTo              mixed      optional    Default: null; otherwise will be redirected to given uri\\n * &redirectScheme          string     optional    Default: `full` (modx->makeURL parameter)\\n * -------\\n * &typ                     string     optional    Default: `JWT` (options: JWT, JWS)\\n * &alg                     string     required    Default: `HS256,HS384,HS512`; list of allowed alghoritms\\n * &validAlg                string     optional    Alternate to &alg\\n * -------\\n * secretKey                string     required    Required for symetric algorithm, like HS256, HS384 or HS512.  \\n *                                                 - using default modx setting: `[[++modjwt.secretkey]]`\\n *                                                 - using custom secret key: `mysecretkey1234`\\n * secretFile               string     required    Absolute path to file PUBLIC-KEY. Required for asymetric algorithm, like RS256.\\n *                                                 - using default modx setting: `[[++modjwt.publickey]]`\\n *                                                 - using custom file: `\\/var\\/www\\/modx\\/protectedfolder\\/mypublic.key`\\n * -------\\n * &mimeType                string     optional    Default: `JSON` (options: json, html)\\n * &toPlaceholder           mixed      optional    Default: null (direct output), otherwise will be set to the &toPlaceholder\'s value.\\n * &debugPlaceholder        string     optional    Default: `jwtDebug`\\n * -------\\n * &iss                     string     optional    URI of JWT issuer (default: your MODx URL) \\n * &sub                     string     optional    If empty, auto-populated by subField value below\\n * &subField                string     optional    Default: email of visitor\\/user (options: username, email, userid, sessionid)\\n * &aud                     string     optional    URI of the audience\\/server \\n * &jti                     bool       optional    Default: false (if true, auto-populated by sessionid)\\n * &leeway                  integer    optional    Default: 0, the amount of seconds to move or act that is available; no need in same server\\n *\\n *\\n * USAGE:\\n *\\n * [[jwtDecode]]\\n * [[jwtDecode? &redirectTo=`50`]]                         \\/\\/on success will be redirected to resourceid=10\\n * [[jwtDecode? &redirectTo=`http:\\/\\/mydomain.com\\/video\\/`]] \\/\\/on success will be redirected to this url\\n * [[jwtDecode? &validAlg=`HS256,HS384`]]                  \\/\\/only this algorithm allowed\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n * @var modJWT $modJWT\\n**\\/\\n\\n$output = \'\';\\n\\n\\/**\\n * You can edit scriptProperties configurations below\\n**\\/\\n\\n\\/\\/ Core path\\n$corePath  = $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/modjwt\\/\';\\n$scriptProperties[\'corePath\'] = $corePath;\\n$scriptProperties[\'requestType\'] = \'decode\';\\n\\n\\/** @var modJWT $modJWT *\\/\\n$modJWT = $modx->getService(\\n    \'modjwt\', \\n    \'modFirebaseJWT\', \\n    $corePath . \'model\\/modjwt\\/\',\\n    $scriptProperties\\n);\\n\\nif (!$modJWT) {\\n    $log = \'Could not load modJWT class!\';\\n    \\n    $modx->setPlaceholder($debugPlaceholder, $log);\\n    $modx->log(modX::LOG_LEVEL_ERROR, $log);\\n    \\n    return json_encode(array(\\n        \'_valid\'     => 0,\\n        \'status\'     => 503,\\n        \'statusText\' => \'Service Unavailable\',\\n        \'errorLog\'   => $log\\n    ));\\n}\\n\\n$output = \'\';\\nif ($payload = $modJWT->decodeJWT()) {  \\/\\/success\\n  $output = $modJWT->jsonData;\\n} else {                                \\/\\/error\\n  $output = $modJWT->errorData;\\n}\\n\\nreturn $output;"}',
        'guid' => '161deb9917a7965c3a4f01b675f95466',
        'native_key' => 1,
        'signature' => '99cebee59d246383fa6064deb606a336',
      ),
      'cc70c88f3b21945be7b31babe6daf6c6' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"name":"jwtEncode","description":"Issuing or encoding JWT Token.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * jwtEncode snippet for modJWT extra\\n *\\n * Copyright (C) 2019 by Zaenal <zaenal(#)lokamaya.com>\\n * Created on 03-26-2019\\n *\\n * modJWT is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * modJWT is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * modJWT; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package modjwt\\n *\\/\\n\\n\\/**\\n * jwtEncode\\n *\\n * DESCRIPTION\\n *\\n * Issuing or encoding JWT Token.\\n * You can output directly or to placeholder\\n *\\n *\\n * PROPERTIES:\\n * &alg                     string     optional    Default: HS256 (options: HS256, HS384, HS512 and RS256)\\n * &typ                     string     optional    Default: JWT (options: JWT, JWS)\\n * -------\\n * secretFile               string     required    Absolute path to file PRIVATE-KEY. Required for asymetric algorithm, like RS256.\\n *                                                 - using default modx setting: `[[++modjwt.privatekey]]`\\n *                                                 - using custom file: `\\/var\\/www\\/modx\\/protectedfolder\\/myprivate.key`\\n * secretKey                string     required    Required for symetric algorithm, like HS256, HS384 or HS512.  \\n *                                                 - using default modx setting: `[[++modjwt.secretkey]]`\\n *                                                 - using custom secret key: `mysecretkey1234`\\n * -------\\n * &mimeType                string     optional    Default: json (options: json, html)\\n * &toPlaceholder           string     optional    Default: null (if null mean direct output)\\n * &debugPlaceholder        string     optional    Default: jwtDebug\\n * -------\\n * &iss                     string     optional    URI of JWT issuer (default: your MODx URL) \\n * &sub                     string     optional    If empty, auto-populated by subField value below\\n * &subField                string     optional    Default: email of visitor\\/user (options: username, email, userid, sessionid)\\n * &aud                     string     optional    URI of the audience\\/server \\n * &jti                     bool       optional    Default: false (if true, auto-populated by sessionid)\\n * -------\\n * &iat                     timestamp  not-used    Auto-populated: current timestamp\\n * &exp                     timestamp  not-used    Auto-populated: current timestamp + expAge\\n * &nbf                     timestamp  not-used    Auto-populated: current timestamp + nbfAge\\n * &expAge                  integer    optional    Default: 3600 seconds or 1 hour\\n * &nbfAge                  integer    optional    Default: 0; if greater than 0 than &nbf will be populated\\n * -------\\n * &payloadData             json       optional    Example: `{\\"A\\":\\"1\\", \\"200\\":\\"enclosed with quote\\"}`\\n *                                                 valid JSON-string key must be enclosed with quote\\n *\\n * USAGE:\\n *\\n * [[jwtCreate]]\\n * [[jwtCreate? &payloadData=`{\\"fullname\\":\\"John Doe\\"}`]] \\/\\/add fullname to JWT Payload\\n * [[jwtCreate? &payloadData=`{\\"group\\":\\"superadmin\\", \\"access\\":\\"full\\"}` &iss=`https:\\/\\/www.google.com` ]] \\/\\/add payloadData, and change the issuer\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n * @var modJWT $modJWT\\n**\\/\\n\\n$output = \'\';\\n\\n\\/\\/ Core path\\n$corePath  = $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/modjwt\\/\';\\n$scriptProperties[\'corePath\'] = $corePath;\\n$scriptProperties[\'requestType\'] = \'encode\';\\n\\n\\/** @var modJWT $modJWT *\\/\\n$modJWT = $modx->getService(\\n    \'modjwt\', \\n    \'modFirebaseJWT\', \\n    $corePath . \'model\\/modjwt\\/\',\\n    $scriptProperties\\n);\\n\\nif (!$modJWT) {\\n    $log = \'Could not load modJWT class!\';\\n    \\n    $modx->setPlaceholder($debugPlaceholder, $log);\\n    $modx->log(modX::LOG_LEVEL_ERROR, $log);\\n    \\n    return json_encode(array(\\n        \'_valid\'     => 0,\\n        \'status\'     => 503,\\n        \'statusText\' => \'Service Unavailable\',\\n        \'errorLog\'   => $log\\n    ));\\n}\\n\\n$output=\'\';\\nif ($token = $modJWT->encodeJWT()) {  \\/\\/success\\n  $output = $modJWT->jsonData;\\n} else {                              \\/\\/error\\n  $output = $modJWT->errorData;\\n}\\n\\nreturn $output;","locked":0,"properties":"a:19:{s:3:\\"aud\\";a:7:{s:4:\\"name\\";s:3:\\"aud\\";s:4:\\"desc\\";s:49:\\"URI of the audience\\/server (default: your domain)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"exp\\";a:7:{s:4:\\"name\\";s:3:\\"exp\\";s:4:\\"desc\\";s:42:\\"Auto-populated: current timestamp + expAge\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"iat\\";a:7:{s:4:\\"name\\";s:3:\\"iat\\";s:4:\\"desc\\";s:33:\\"Auto-populated: current timestamp\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"iss\\";a:7:{s:4:\\"name\\";s:3:\\"iss\\";s:4:\\"desc\\";s:40:\\"URI of JWT issuer (default: your domain)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"nbf\\";a:7:{s:4:\\"name\\";s:3:\\"nbf\\";s:4:\\"desc\\";s:42:\\"Auto-populated: current timestamp + nbfAge\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"sub\\";a:7:{s:4:\\"name\\";s:3:\\"sub\\";s:4:\\"desc\\";s:79:\\"Subject or user that use the Token. If empty, auto-populated by subField value.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:6:\\"leeway\\";a:7:{s:4:\\"name\\";s:6:\\"leeway\\";s:4:\\"desc\\";s:48:\\"Timestamp leeway synchronization between servers\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:6:\\"nbfAge\\";a:7:{s:4:\\"name\\";s:6:\\"nbfAge\\";s:4:\\"desc\\";s:57:\\"Default: 0; if greater than 0 than &nbf will be populated\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:6:\\"expAge\\";a:7:{s:4:\\"name\\";s:6:\\"expAge\\";s:4:\\"desc\\";s:33:\\"Expire age. Default: 3600 seconds\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:4:\\"3600\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"alg\\";a:7:{s:4:\\"name\\";s:3:\\"alg\\";s:4:\\"desc\\";s:71:\\"JWT algorithm. Default `HS256` (options: HS256, HS384, HS512 and RS256)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:5:\\"HS256\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"jti\\";a:7:{s:4:\\"name\\";s:3:\\"jti\\";s:4:\\"desc\\";s:53:\\"Default: false (if true, auto-populated by sessionid)\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"typ\\";a:7:{s:4:\\"name\\";s:3:\\"typ\\";s:4:\\"desc\\";s:45:\\"JSON Type. Default: `JWT` (options: JWT, JWS)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:3:\\"JWT\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:8:\\"subField\\";a:7:{s:4:\\"name\\";s:8:\\"subField\\";s:4:\\"desc\\";s:103:\\"User variable to use for \\"sub\\" as subject. Default: email (options: username, email, userid, sessionid)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:5:\\"email\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:11:\\"payloadData\\";a:7:{s:4:\\"name\\";s:11:\\"payloadData\\";s:4:\\"desc\\";s:20:\\"Data of JWT Payload \\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:4:\\"keys\\";}s:11:\\"privateFile\\";a:7:{s:4:\\"name\\";s:11:\\"privateFile\\";s:4:\\"desc\\";s:135:\\"Absolute path to file PRIVATE KEY. Required for asymetric algorithm, like RS256. Default: `[[++modjwt.privatekey]]` from configuration.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:4:\\"keys\\";}s:9:\\"secretKey\\";a:7:{s:4:\\"name\\";s:9:\\"secretKey\\";s:4:\\"desc\\";s:116:\\"Secret key for symetric algorithm, like HS256, HS384 or HS512. Default: `[[++modjwt.secretkey]]` from configuration.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:4:\\"keys\\";}s:13:\\"toPlaceholder\\";a:7:{s:4:\\"name\\";s:13:\\"toPlaceholder\\";s:4:\\"desc\\";s:42:\\"Default: null (if null mean direct output)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}s:8:\\"mimeType\\";a:7:{s:4:\\"name\\";s:8:\\"mimeType\\";s:4:\\"desc\\";s:61:\\"Output as json or text. Default: `json` (options: json, text)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:4:\\"json\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}s:16:\\"debugPlaceholder\\";a:7:{s:4:\\"name\\";s:16:\\"debugPlaceholder\\";s:4:\\"desc\\";s:49:\\"Placeholder for debuging JWT. Default: `jwtDebug`\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:8:\\"jwtDebug\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * jwtEncode snippet for modJWT extra\\n *\\n * Copyright (C) 2019 by Zaenal <zaenal(#)lokamaya.com>\\n * Created on 03-26-2019\\n *\\n * modJWT is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * modJWT is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * modJWT; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package modjwt\\n *\\/\\n\\n\\/**\\n * jwtEncode\\n *\\n * DESCRIPTION\\n *\\n * Issuing or encoding JWT Token.\\n * You can output directly or to placeholder\\n *\\n *\\n * PROPERTIES:\\n * &alg                     string     optional    Default: HS256 (options: HS256, HS384, HS512 and RS256)\\n * &typ                     string     optional    Default: JWT (options: JWT, JWS)\\n * -------\\n * secretFile               string     required    Absolute path to file PRIVATE-KEY. Required for asymetric algorithm, like RS256.\\n *                                                 - using default modx setting: `[[++modjwt.privatekey]]`\\n *                                                 - using custom file: `\\/var\\/www\\/modx\\/protectedfolder\\/myprivate.key`\\n * secretKey                string     required    Required for symetric algorithm, like HS256, HS384 or HS512.  \\n *                                                 - using default modx setting: `[[++modjwt.secretkey]]`\\n *                                                 - using custom secret key: `mysecretkey1234`\\n * -------\\n * &mimeType                string     optional    Default: json (options: json, html)\\n * &toPlaceholder           string     optional    Default: null (if null mean direct output)\\n * &debugPlaceholder        string     optional    Default: jwtDebug\\n * -------\\n * &iss                     string     optional    URI of JWT issuer (default: your MODx URL) \\n * &sub                     string     optional    If empty, auto-populated by subField value below\\n * &subField                string     optional    Default: email of visitor\\/user (options: username, email, userid, sessionid)\\n * &aud                     string     optional    URI of the audience\\/server \\n * &jti                     bool       optional    Default: false (if true, auto-populated by sessionid)\\n * -------\\n * &iat                     timestamp  not-used    Auto-populated: current timestamp\\n * &exp                     timestamp  not-used    Auto-populated: current timestamp + expAge\\n * &nbf                     timestamp  not-used    Auto-populated: current timestamp + nbfAge\\n * &expAge                  integer    optional    Default: 3600 seconds or 1 hour\\n * &nbfAge                  integer    optional    Default: 0; if greater than 0 than &nbf will be populated\\n * -------\\n * &payloadData             json       optional    Example: `{\\"A\\":\\"1\\", \\"200\\":\\"enclosed with quote\\"}`\\n *                                                 valid JSON-string key must be enclosed with quote\\n *\\n * USAGE:\\n *\\n * [[jwtCreate]]\\n * [[jwtCreate? &payloadData=`{\\"fullname\\":\\"John Doe\\"}`]] \\/\\/add fullname to JWT Payload\\n * [[jwtCreate? &payloadData=`{\\"group\\":\\"superadmin\\", \\"access\\":\\"full\\"}` &iss=`https:\\/\\/www.google.com` ]] \\/\\/add payloadData, and change the issuer\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n * @var modJWT $modJWT\\n**\\/\\n\\n$output = \'\';\\n\\n\\/\\/ Core path\\n$corePath  = $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/modjwt\\/\';\\n$scriptProperties[\'corePath\'] = $corePath;\\n$scriptProperties[\'requestType\'] = \'encode\';\\n\\n\\/** @var modJWT $modJWT *\\/\\n$modJWT = $modx->getService(\\n    \'modjwt\', \\n    \'modFirebaseJWT\', \\n    $corePath . \'model\\/modjwt\\/\',\\n    $scriptProperties\\n);\\n\\nif (!$modJWT) {\\n    $log = \'Could not load modJWT class!\';\\n    \\n    $modx->setPlaceholder($debugPlaceholder, $log);\\n    $modx->log(modX::LOG_LEVEL_ERROR, $log);\\n    \\n    return json_encode(array(\\n        \'_valid\'     => 0,\\n        \'status\'     => 503,\\n        \'statusText\' => \'Service Unavailable\',\\n        \'errorLog\'   => $log\\n    ));\\n}\\n\\n$output=\'\';\\nif ($token = $modJWT->encodeJWT()) {  \\/\\/success\\n  $output = $modJWT->jsonData;\\n} else {                              \\/\\/error\\n  $output = $modJWT->errorData;\\n}\\n\\nreturn $output;"}',
        'guid' => 'e121a6afa7150149159a9bad3b97f7d1',
        'native_key' => 2,
        'signature' => 'e0c9968f863102a1e8887b106e82b583',
      ),
      '74fd172ce4428d5cf71517f744b56936' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":3,"source":0,"property_preprocess":0,"name":"jwtDecodeRunSnippet","description":"Output custom value after validating Token","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * jwtDecodeRunSnippet \\n *\\n * DESCRIPTION\\n *\\n * Validating Token, run snippet, return custom output\\n * You can duplicate or modify this snippet and play around\\n *\\n * PROPERTIES: && all properties of jwtDecode snippet\\n * &retval           string   required   Return this value instead of Payload\\n *\\n * USAGE:\\n * [[jwtDecodeRunSnippet? &retval=`https:\\/\\/domain\\/mysecreturl-nobodyknow`]]   \\/\\/on success will supply this link\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n**\\/\\n\\n\\/\\/Evaluate required properties\\n$scriptProperties[\'retval\'] = isset($scriptProperties[\'retval\']) ? $scriptProperties[\'retval\'] : \'-required-\';\\n\\n\\/\\/Run the snippet: jwtDecode\\n$output = $modx->runSnippet(\'jwtDecode\', $scriptProperties);\\n\\n\\/\\/Turn the JSON Object to Array\\n$outputarray = json_decode($output, true); \\/\\/return array\\n\\n\\/\\/Evaluate\\nif ($outputarray[\'_valid\'] === 1) { \\/\\/on success output custom value\\n\\n    \\/\\/Modify output\\n    $output = json_encode(array(\\n        \'_valid\'     => 1,\\n        \'retval\'     => $scriptProperties[\'retval\']\\n    ));\\n}\\n\\n\\/\\/Return output\\nreturn $output;","locked":0,"properties":"a:18:{s:3:\\"aud\\";a:7:{s:4:\\"name\\";s:3:\\"aud\\";s:4:\\"desc\\";s:50:\\"URI of the audience\\/server (default: your domain) \\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"iss\\";a:7:{s:4:\\"name\\";s:3:\\"iss\\";s:4:\\"desc\\";s:41:\\"URI of JWT issuer (default: your domain) \\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"jti\\";a:7:{s:4:\\"name\\";s:3:\\"jti\\";s:4:\\"desc\\";s:53:\\"Default: false (if true, auto-populated by sessionid)\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"sub\\";a:7:{s:4:\\"name\\";s:3:\\"sub\\";s:4:\\"desc\\";s:79:\\"Subject or user that use the Token. If empty, auto-populated by subField value.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:8:\\"validAlg\\";a:7:{s:4:\\"name\\";s:8:\\"validAlg\\";s:4:\\"desc\\";s:17:\\"Alternate to &alg\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:6:\\"leeway\\";a:7:{s:4:\\"name\\";s:6:\\"leeway\\";s:4:\\"desc\\";s:48:\\"Timestamp leeway synchronization between servers\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:6:\\"expAge\\";a:7:{s:4:\\"name\\";s:6:\\"expAge\\";s:4:\\"desc\\";s:33:\\"Expire age. Default: 3600 seconds\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:4:\\"3600\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"alg\\";a:7:{s:4:\\"name\\";s:3:\\"alg\\";s:4:\\"desc\\";s:71:\\"JWT algorithm. Default `HS256` (options: HS256, HS384, HS512 and RS256)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:5:\\"HS256\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"typ\\";a:7:{s:4:\\"name\\";s:3:\\"typ\\";s:4:\\"desc\\";s:45:\\"JSON Type. Default: `JWT` (options: JWT, JWS)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:3:\\"JWT\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:8:\\"subField\\";a:7:{s:4:\\"name\\";s:8:\\"subField\\";s:4:\\"desc\\";s:103:\\"User variable to use for \\"sub\\" as subject. Default: email (options: username, email, userid, sessionid)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:5:\\"email\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:10:\\"publicFile\\";a:7:{s:4:\\"name\\";s:10:\\"publicFile\\";s:4:\\"desc\\";s:133:\\"Absolute path to file PUBLIC KEY. Required for asymetric algorithm, like RS256. Default: `[[++modjwt.publickey]]` from configuration.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:4:\\"keys\\";}s:9:\\"secretKey\\";a:7:{s:4:\\"name\\";s:9:\\"secretKey\\";s:4:\\"desc\\";s:116:\\"Secret key for symetric algorithm, like HS256, HS384 or HS512. Default: `[[++modjwt.secretkey]]` from configuration.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:4:\\"keys\\";}s:13:\\"toPlaceholder\\";a:7:{s:4:\\"name\\";s:13:\\"toPlaceholder\\";s:4:\\"desc\\";s:42:\\"Default: null (if null mean direct output)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}s:10:\\"redirectTo\\";a:7:{s:4:\\"name\\";s:10:\\"redirectTo\\";s:4:\\"desc\\";s:54:\\"Default: 0; otherwise will be redirected to given uri.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}s:6:\\"method\\";a:7:{s:4:\\"name\\";s:6:\\"method\\";s:4:\\"desc\\";s:78:\\"How to get the Token? Default: `HEADER,GET` (options: HEADER, JSON, POST, GET)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:10:\\"HEADER,GET\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}s:8:\\"mimeType\\";a:7:{s:4:\\"name\\";s:8:\\"mimeType\\";s:4:\\"desc\\";s:61:\\"Output as json or text. Default: `json` (options: json, text)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:4:\\"json\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}s:16:\\"debugPlaceholder\\";a:7:{s:4:\\"name\\";s:16:\\"debugPlaceholder\\";s:4:\\"desc\\";s:49:\\"Placeholder for debuging JWT. Default: `jwtDebug`\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:8:\\"jwtDebug\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}s:9:\\"httpQuery\\";a:7:{s:4:\\"name\\";s:9:\\"httpQuery\\";s:4:\\"desc\\";s:55:\\"Required if using method POST or GET. Default: `token`.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:5:\\"token\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * jwtDecodeRunSnippet \\n *\\n * DESCRIPTION\\n *\\n * Validating Token, run snippet, return custom output\\n * You can duplicate or modify this snippet and play around\\n *\\n * PROPERTIES: && all properties of jwtDecode snippet\\n * &retval           string   required   Return this value instead of Payload\\n *\\n * USAGE:\\n * [[jwtDecodeRunSnippet? &retval=`https:\\/\\/domain\\/mysecreturl-nobodyknow`]]   \\/\\/on success will supply this link\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n**\\/\\n\\n\\/\\/Evaluate required properties\\n$scriptProperties[\'retval\'] = isset($scriptProperties[\'retval\']) ? $scriptProperties[\'retval\'] : \'-required-\';\\n\\n\\/\\/Run the snippet: jwtDecode\\n$output = $modx->runSnippet(\'jwtDecode\', $scriptProperties);\\n\\n\\/\\/Turn the JSON Object to Array\\n$outputarray = json_decode($output, true); \\/\\/return array\\n\\n\\/\\/Evaluate\\nif ($outputarray[\'_valid\'] === 1) { \\/\\/on success output custom value\\n\\n    \\/\\/Modify output\\n    $output = json_encode(array(\\n        \'_valid\'     => 1,\\n        \'retval\'     => $scriptProperties[\'retval\']\\n    ));\\n}\\n\\n\\/\\/Return output\\nreturn $output;"}',
        'guid' => '6120d1358b6e57982d109ec256d8aefe',
        'native_key' => 3,
        'signature' => 'f26c8f242c484351ed5dc4981db29eb7',
      ),
    ),
    'Plugins' => 
    array (
      '534bd57b938090485134e3aa40245bca' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modPlugin',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"jwtOnAuthorization","description":"Not used. Reserved for further development.","editor_type":0,"category":0,"cache_type":0,"plugincode":"\\/**\\n * jwtOnAuthorization plugin for modJWT extra\\n *\\n * NOT USED. Reserved for further development.\\n *\\n * @package modjwt\\n *\\/","locked":0,"properties":"a:0:{}","disabled":1,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * jwtOnAuthorization plugin for modJWT extra\\n *\\n * NOT USED. Reserved for further development.\\n *\\n * @package modjwt\\n *\\/"}',
        'guid' => '98ffa9350a022b93fd88d46cdb37579d',
        'native_key' => 1,
        'signature' => '1bf06b016b7428cb62ce83d03a0a1731',
      ),
    ),
    'PropertySets' => 
    array (
      '13ff49af0aea60d0d1b038ebad4a8419' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modPropertySet',
        'object' => '{"id":1,"name":"jwtdecodeprops","category":0,"description":"jwtDecode properties","properties":"a:18:{s:3:\\"aud\\";a:7:{s:4:\\"name\\";s:3:\\"aud\\";s:4:\\"desc\\";s:49:\\"URI of the audience\\/server (default: your domain)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"iss\\";a:7:{s:4:\\"name\\";s:3:\\"iss\\";s:4:\\"desc\\";s:40:\\"URI of JWT issuer (default: your domain)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"jti\\";a:7:{s:4:\\"name\\";s:3:\\"jti\\";s:4:\\"desc\\";s:53:\\"Default: false (if true, auto-populated by sessionid)\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"sub\\";a:7:{s:4:\\"name\\";s:3:\\"sub\\";s:4:\\"desc\\";s:79:\\"Subject or user that use the Token. If empty, auto-populated by subField value.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:8:\\"validAlg\\";a:7:{s:4:\\"name\\";s:8:\\"validAlg\\";s:4:\\"desc\\";s:17:\\"Alternate to &alg\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:6:\\"leeway\\";a:7:{s:4:\\"name\\";s:6:\\"leeway\\";s:4:\\"desc\\";s:48:\\"Timestamp leeway synchronization between servers\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:6:\\"expAge\\";a:7:{s:4:\\"name\\";s:6:\\"expAge\\";s:4:\\"desc\\";s:33:\\"Expire age. Default: 3600 seconds\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:4:\\"3600\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"alg\\";a:7:{s:4:\\"name\\";s:3:\\"alg\\";s:4:\\"desc\\";s:71:\\"JWT algorithm. Default `HS256` (options: HS256, HS384, HS512 and RS256)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:5:\\"HS256\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"typ\\";a:7:{s:4:\\"name\\";s:3:\\"typ\\";s:4:\\"desc\\";s:45:\\"JSON Type. Default: `JWT` (options: JWT, JWS)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:3:\\"JWT\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:8:\\"subField\\";a:7:{s:4:\\"name\\";s:8:\\"subField\\";s:4:\\"desc\\";s:103:\\"User variable to use for \\"sub\\" as subject. Default: email (options: username, email, userid, sessionid)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:5:\\"email\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:10:\\"publicFile\\";a:7:{s:4:\\"name\\";s:10:\\"publicFile\\";s:4:\\"desc\\";s:133:\\"Absolute path to file PUBLIC KEY. Required for asymetric algorithm, like RS256. Default: `[[++modjwt.publickey]]` from configuration.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:4:\\"keys\\";}s:9:\\"secretKey\\";a:7:{s:4:\\"name\\";s:9:\\"secretKey\\";s:4:\\"desc\\";s:116:\\"Secret key for symetric algorithm, like HS256, HS384 or HS512. Default: `[[++modjwt.secretkey]]` from configuration.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:4:\\"keys\\";}s:13:\\"toPlaceholder\\";a:7:{s:4:\\"name\\";s:13:\\"toPlaceholder\\";s:4:\\"desc\\";s:42:\\"Default: null (if null mean direct output)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}s:10:\\"redirectTo\\";a:7:{s:4:\\"name\\";s:10:\\"redirectTo\\";s:4:\\"desc\\";s:54:\\"Default: 0; otherwise will be redirected to given uri.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}s:6:\\"method\\";a:7:{s:4:\\"name\\";s:6:\\"method\\";s:4:\\"desc\\";s:78:\\"How to get the Token? Default: `HEADER,GET` (options: HEADER, JSON, POST, GET)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:10:\\"HEADER,GET\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}s:8:\\"mimeType\\";a:7:{s:4:\\"name\\";s:8:\\"mimeType\\";s:4:\\"desc\\";s:61:\\"Output as json or text. Default: `json` (options: json, text)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:4:\\"json\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}s:16:\\"debugPlaceholder\\";a:7:{s:4:\\"name\\";s:16:\\"debugPlaceholder\\";s:4:\\"desc\\";s:49:\\"Placeholder for debuging JWT. Default: `jwtDebug`\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:8:\\"jwtDebug\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}s:9:\\"httpQuery\\";a:7:{s:4:\\"name\\";s:9:\\"httpQuery\\";s:4:\\"desc\\";s:55:\\"Required if using method POST or GET. Default: `token`.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:5:\\"token\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}}"}',
        'guid' => '7400224a207fc19281227f8770ad74be',
        'native_key' => 1,
        'signature' => 'f3e57610d884c4961799733207fca93a',
      ),
      '2076cd5b51e2ad9bbca7ad8102f4ae98' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modPropertySet',
        'object' => '{"id":2,"name":"jwtpluginprops","category":0,"description":"JWT plugin propertis","properties":"a:1:{s:10:\\"redirectTo\\";a:7:{s:4:\\"name\\";s:10:\\"redirectTo\\";s:4:\\"desc\\";s:33:\\"Redirect on success authorization\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}}"}',
        'guid' => 'c0f884d3466efff06887d209686352e1',
        'native_key' => 2,
        'signature' => 'a22c577334d9a7b82138b47427944d95',
      ),
      'fe13220a4aaed5ddd02f99ce973fbea5' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modPropertySet',
        'object' => '{"id":3,"name":"jwtencodeprops","category":0,"description":"jwtEncode properties","properties":"a:19:{s:3:\\"aud\\";a:7:{s:4:\\"name\\";s:3:\\"aud\\";s:4:\\"desc\\";s:49:\\"URI of the audience\\/server (default: your domain)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"exp\\";a:7:{s:4:\\"name\\";s:3:\\"exp\\";s:4:\\"desc\\";s:42:\\"Auto-populated: current timestamp + expAge\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"iat\\";a:7:{s:4:\\"name\\";s:3:\\"iat\\";s:4:\\"desc\\";s:33:\\"Auto-populated: current timestamp\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"iss\\";a:7:{s:4:\\"name\\";s:3:\\"iss\\";s:4:\\"desc\\";s:40:\\"URI of JWT issuer (default: your domain)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"nbf\\";a:7:{s:4:\\"name\\";s:3:\\"nbf\\";s:4:\\"desc\\";s:42:\\"Auto-populated: current timestamp + nbfAge\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"sub\\";a:7:{s:4:\\"name\\";s:3:\\"sub\\";s:4:\\"desc\\";s:79:\\"Subject or user that use the Token. If empty, auto-populated by subField value.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:6:\\"leeway\\";a:7:{s:4:\\"name\\";s:6:\\"leeway\\";s:4:\\"desc\\";s:48:\\"Timestamp leeway synchronization between servers\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:6:\\"nbfAge\\";a:7:{s:4:\\"name\\";s:6:\\"nbfAge\\";s:4:\\"desc\\";s:57:\\"Default: 0; if greater than 0 than &nbf will be populated\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:6:\\"expAge\\";a:7:{s:4:\\"name\\";s:6:\\"expAge\\";s:4:\\"desc\\";s:33:\\"Expire age. Default: 3600 seconds\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:4:\\"3600\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"alg\\";a:7:{s:4:\\"name\\";s:3:\\"alg\\";s:4:\\"desc\\";s:71:\\"JWT algorithm. Default `HS256` (options: HS256, HS384, HS512 and RS256)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:5:\\"HS256\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"jti\\";a:7:{s:4:\\"name\\";s:3:\\"jti\\";s:4:\\"desc\\";s:53:\\"Default: false (if true, auto-populated by sessionid)\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:3:\\"typ\\";a:7:{s:4:\\"name\\";s:3:\\"typ\\";s:4:\\"desc\\";s:45:\\"JSON Type. Default: `JWT` (options: JWT, JWS)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:3:\\"JWT\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:8:\\"subField\\";a:7:{s:4:\\"name\\";s:8:\\"subField\\";s:4:\\"desc\\";s:103:\\"User variable to use for \\"sub\\" as subject. Default: email (options: username, email, userid, sessionid)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:5:\\"email\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:7:\\"configs\\";}s:11:\\"payloadData\\";a:7:{s:4:\\"name\\";s:11:\\"payloadData\\";s:4:\\"desc\\";s:20:\\"Data of JWT Payload \\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:4:\\"keys\\";}s:11:\\"privateFile\\";a:7:{s:4:\\"name\\";s:11:\\"privateFile\\";s:4:\\"desc\\";s:135:\\"Absolute path to file PRIVATE KEY. Required for asymetric algorithm, like RS256. Default: `[[++modjwt.privatekey]]` from configuration.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:4:\\"keys\\";}s:9:\\"secretKey\\";a:7:{s:4:\\"name\\";s:9:\\"secretKey\\";s:4:\\"desc\\";s:116:\\"Secret key for symetric algorithm, like HS256, HS384 or HS512. Default: `[[++modjwt.secretkey]]` from configuration.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:4:\\"keys\\";}s:13:\\"toPlaceholder\\";a:7:{s:4:\\"name\\";s:13:\\"toPlaceholder\\";s:4:\\"desc\\";s:42:\\"Default: null (if null mean direct output)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}s:8:\\"mimeType\\";a:7:{s:4:\\"name\\";s:8:\\"mimeType\\";s:4:\\"desc\\";s:61:\\"Output as json or text. Default: `json` (options: json, text)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:4:\\"json\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}s:16:\\"debugPlaceholder\\";a:7:{s:4:\\"name\\";s:16:\\"debugPlaceholder\\";s:4:\\"desc\\";s:49:\\"Placeholder for debuging JWT. Default: `jwtDebug`\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:8:\\"jwtDebug\\";s:7:\\"lexicon\\";s:2:\\"en\\";s:4:\\"area\\";s:5:\\"props\\";}}"}',
        'guid' => 'ba8d99c63d9e1ce40347f239fab3932b',
        'native_key' => 3,
        'signature' => '29171859a14dfb68c99d733da859997f',
      ),
    ),
  ),
  'abort_install_on_vehicle_fail' => true,
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'PropertySets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Chunks' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Plugins' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
  ),
  'namespace' => 'modjwt',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"modjwt-1.0.0-beta\\/modCategory\\/c9dae1646bc265c60d6c87e281e40634\\/0\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"modjwt"}',
    ),
    1 => 
    array (
      'type' => 'php',
      'body' => '{"source":"modjwt-1.0.0-beta\\/modCategory\\/c9dae1646bc265c60d6c87e281e40634.plugin.resolver.resolver","type":"php","name":"plugin.resolver"}',
    ),
    2 => 
    array (
      'type' => 'php',
      'body' => '{"source":"modjwt-1.0.0-beta\\/modCategory\\/c9dae1646bc265c60d6c87e281e40634.resource.resolver.resolver","type":"php","name":"resource.resolver"}',
    ),
    3 => 
    array (
      'type' => 'php',
      'body' => '{"source":"modjwt-1.0.0-beta\\/modCategory\\/c9dae1646bc265c60d6c87e281e40634.propertyset.resolver.resolver","type":"php","name":"propertyset.resolver"}',
    ),
    4 => 
    array (
      'type' => 'php',
      'body' => '{"source":"modjwt-1.0.0-beta\\/modCategory\\/c9dae1646bc265c60d6c87e281e40634.modjwt.resolver.resolver","type":"php","name":"modjwt.resolver"}',
    ),
  ),
  'validate' => 
  array (
    0 => 
    array (
      'type' => 'php',
      'body' => '{"source":"modjwt-1.0.0-beta\\/modCategory\\/c9dae1646bc265c60d6c87e281e40634.modjwt.validator.validator","type":"php","name":"modjwt.validator"}',
    ),
  ),
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => 'd40530547f0e70d08199c2a3074c9546',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => 'c9dae1646bc265c60d6c87e281e40634',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"modJWT","rank":0}',
);